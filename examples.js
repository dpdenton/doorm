"use strict";
exports.__esModule = true;
var Table_1 = require("./lorm/Table");
var PostgresQueryBuilder_1 = require("./lorm/QueryBuilder/PostgresQueryBuilder");
var Column_1 = require("./lorm/Column");
// /*** CATEGORY QUERY MODEL ***/
//
// // define Table / Columns; These will typically be generated by a dialect-specific utility tool;
//
// //const columnId = new Column(`"Categories"."id"`, true).as(`"Categories.id"`);
// const columnId = new Column('id').sql(`"Categories"."id"`).as(`"Categories.id"`);
// const columnName = new Column('name').sql(`"Categories"."name"`).as(`"Categories.name"`);
//
// const categoryTable = new Table('Categories')
//     .addColumn(columnId)
//     .addColumn(columnName);
//
// // use the QueryBuilder to actually build the query based on the Table
// const categoryQueryBuilder = new PostgresQueryBuilder(categoryTable);
//
// // set the function to generate the foreign key column - revise this.. bit smelly.
// categoryQueryBuilder.relationFn = relationFn;
//
// // build the actual query
// console.log(categoryQueryBuilder.select().from().toSql());
/*** RATEABLE QUERY MODEL ***/
//
// // define Table / Columns; These will typically be generated by a dialect-specific utility tool;
// const rateableColumnId = new Column(`"Rateables"."id"`, true).as(`"Rateables.id"`);
// const rateableColumnName = new Column(`"Rateables"."name"`).as(`"Rateables.name"`);
// const rateableColumnCategoryId = new Column(`"Rateables"."CategoryId"`).as(`"Rateables.CategoryId"`);
//
// const rateableTable = new Table('Rateables')
//     .addColumn(rateableColumnId)
//     .addColumn(rateableColumnName)
//     .addColumn(rateableColumnCategoryId);
//
// // use the QueryBuilder to actually build the query based on the Table
// const rateableQueryBuilder = new PostgresQueryBuilder(rateableTable);
//
// rateableQueryBuilder.relationFn = relationFn;
//
// rateableQueryBuilder.select().from().join(categoryQueryBuilder);
//
// const userColumnId = new Column(`"Users"."id"`).as(`"Users.id"`).makePrimary();
// const userColumnName = new Column(`"Users"."name"`).as(`"Users.name"`).makePrimary();
// const userColumnImageUri = new Column(`"Users"."imageUri"`).as(`"Users.imageUri"`).makePrimary();
//
// const userModelTable = new Table('Users')
//     .addColumn(userColumnId)
//     .addColumn(userColumnName)
//     .addColumn(userColumnImageUri);
//
// /*** CATEGORY PARSER MODEL ***/
//
// const categoryParser = new ResponseParser(categoryTable);
// const rateableParser = new ResponseParser(rateableTable);
// rateableParser.addInclude(categoryParser);
//
// const config: pg.ClientConfig = {
//     user: 'dpd',
//     database: 'hubbite',
//     password: '',
// };
//
// const client = new pg.Client(config);
//
// client.connect().then(() => {
//     return client.query(rateableQueryBuilder.toSql())
// }).then((res) => {
//
//     res.rows.forEach(row => {
//         categoryParser.parseRow(row);
//         rateableParser.parseRow(row);
//     });
//
//     // console.log(categoryParser);
//     console.log(rateableParser);
//     console.log(categoryParser);
//
//     //results.map((row) => Review.orm.parseRow(row));
//
//     /* Rateable {
//
//         byId: {
//             1: {
//                 name: 'David Denton',
//                 Category: {
//                     id: 11,
//                     name; 12
//                 }
//             }
//         }
//
//     */
// }).then(() => {
//     client.end();
// }).catch((err) => {
//     console.log(err);
//     client.end();
// });
/*** AGGREGATE JOIN ***/
var reviewTable = new Table_1["default"]('Reviews');
var reviewId = new Column_1["default"]('id')
    .sql("\"Reviews\".\"id\"")
    .as("\"Reviews.id\"").setPrimary();
var reviewName = new Column_1["default"]('title')
    .sql("\"Reviews\".\"title\"")
    .as("\"Reviews.title\"");
reviewTable
    .addColumn(reviewId)
    .addColumn(reviewName)
    .save();
var reviewThanksTable = new Table_1["default"]('ReviewThanks');
var reviewThanksReviewId = new Column_1["default"]('ReviewId')
    .sql("\"ReviewThanks\".\"ReviewId\"")
    .as("\"ReviewThanks.ReviewId\"");
var reviewThanksThankCount = new Column_1["default"]('count')
    .sql("COALESCE(CAST(COUNT(\"ReviewId\") AS int4), 0)")
    .as("\"ReviewThanks.count\"");
reviewThanksTable
    .addColumn(reviewThanksReviewId)
    .addColumn(reviewThanksThankCount)
    .save();
var reviewThanksQueryBuilder = new PostgresQueryBuilder_1["default"](reviewThanksTable)
    .select().from()
    .groupBy(reviewThanksReviewId);
var reviewQueryBuilder = new PostgresQueryBuilder_1["default"](reviewTable);
reviewQueryBuilder.select().from().join(reviewThanksQueryBuilder);
console.log(reviewQueryBuilder.toSql());
